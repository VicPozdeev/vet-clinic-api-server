// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Victor Pozdeev",
            "email": "vic.pozdeev@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/mit-license.php"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/clients": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the list of clients.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clients"
                ],
                "summary": "Get a client list.",
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Client"
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new client.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clients"
                ],
                "summary": "Create a new client. Required user's role: Admin",
                "parameters": [
                    {
                        "description": "A new client data for creating.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ClientDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Client"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            }
        },
        "/clients/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns one record matched client's id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clients"
                ],
                "summary": "Get a client.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Client"
                        }
                    },
                    "400": {
                        "description": "Failed to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update the existing client.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clients"
                ],
                "summary": "Update the existing client. Required user's role: Admin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Client data for update.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ClientDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Client"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete the existing client.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clients"
                ],
                "summary": "Delete the existing client. Required user's role: Superuser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Client"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            }
        },
        "/departments": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the list of departments.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Departments"
                ],
                "summary": "Get a department list.",
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Department"
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new department.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Departments"
                ],
                "summary": "Create a new department. Required user's role: Owner",
                "parameters": [
                    {
                        "description": "A new department data for creating.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DepartmentDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Department"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            }
        },
        "/departments/{id_or_slug}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns one record matched department's id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Departments"
                ],
                "summary": "Get a department.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Department ID",
                        "name": "id_or_slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Department"
                        }
                    },
                    "400": {
                        "description": "Failed to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            }
        },
        "/departments/{id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update the existing department.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Departments"
                ],
                "summary": "Update the existing department. Required user's role: Owner",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Department ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Department data for update.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DepartmentDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Department"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete the existing department.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Departments"
                ],
                "summary": "Delete the existing department. Required user's role: Owner",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Department ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Department"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns the health status of the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get the health status.",
                "responses": {
                    "200": {
                        "description": "Success to fetch health status.",
                        "schema": {
                            "$ref": "#/definitions/controllers.HealthResult"
                        }
                    }
                }
            }
        },
        "/leads": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the list of leads.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leads"
                ],
                "summary": "Get a lead list.",
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Lead"
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            },
            "post": {
                "description": "Create a new lead.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leads"
                ],
                "summary": "Create a new lead.",
                "parameters": [
                    {
                        "description": "A new lead data for creating.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LeadDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Lead"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/leads/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns one record matched lead's id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leads"
                ],
                "summary": "Get a lead.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Lead ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Lead"
                        }
                    },
                    "400": {
                        "description": "Failed to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update the existing lead.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leads"
                ],
                "summary": "Update the existing lead.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Lead ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Lead data for update.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LeadDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Lead"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete the existing lead.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leads"
                ],
                "summary": "Delete the existing lead. Required user's role: Superuser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Lead ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Lead"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Login using username, e-mail, or phone along with the password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Login with credentials.",
                "parameters": [
                    {
                        "description": "Login and Password for logged-in.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to the authentication.",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        },
                        "headers": {
                            "Cookie": {
                                "type": "string",
                                "description": "Authorization"
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "description": "Logout the user by invalidating the current session.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Logout user.",
                "responses": {
                    "200": {
                        "description": "Successfully logged out."
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            }
        },
        "/pets": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the list of pets.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pets"
                ],
                "summary": "Get a pet list.",
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new pet.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pets"
                ],
                "summary": "Create a new pet.",
                "parameters": [
                    {
                        "description": "A new pet data for creating.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PetDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Pet"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            }
        },
        "/pets/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns one record matched pet's id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pets"
                ],
                "summary": "Get a pet.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Pet"
                        }
                    },
                    "400": {
                        "description": "Failed to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update the existing pet.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pets"
                ],
                "summary": "Update the existing pet.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Pet data for update.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PetDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Pet"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete the existing pet.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pets"
                ],
                "summary": "Delete the existing pet. Required user's role: Superuser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Pet"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves and returns the user's own profile based on the session.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user's profile.",
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates and returns the user's own profile based on the session.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user's profile.",
                "parameters": [
                    {
                        "description": "User data for update.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserUpdateDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            }
        },
        "/profile/password": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the user's password based on the provided data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user's password.",
                "parameters": [
                    {
                        "description": "Old password and new password for update.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePasswordDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            }
        },
        "/roles": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the list of roles.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Get a role list. Required user's role: Owner",
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Role"
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Create a new role. Required user's role: Superuser",
                "parameters": [
                    {
                        "description": "A new role data for creating.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RoleDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Role"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            }
        },
        "/roles/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns one record matched role's id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Get a role. Required user's role: Owner",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Role"
                        }
                    },
                    "400": {
                        "description": "Failed to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update the existing role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Update the existing role. Required user's role: Superuser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role data for update.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RoleDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Role"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete the existing role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Delete the existing role. Required user's role: Superuser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Role"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            }
        },
        "/services": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the list of services.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get a service list.",
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Service"
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a new service. Required user's role: Owner",
                "parameters": [
                    {
                        "description": "A new service data for creating.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ServiceDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Service"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            }
        },
        "/services/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns one record matched service's id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get a service.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Service"
                        }
                    },
                    "400": {
                        "description": "Failed to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update the existing service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update the existing service. Required user's role: Owner",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Service data for update.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ServiceDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Service"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete the existing service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete the existing service. Required user's role: Owner",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Service"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the list of users.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a user list.",
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user. Required user's role: Owner",
                "parameters": [
                    {
                        "description": "A new user data for creating.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserCreateDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            }
        },
        "/users/{id_or_slug}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns one record matched user's id or slug.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id_or_slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Failed to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            }
        },
        "/users/{id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update the existing user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update the existing user. Required user's role: Owner",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User data for update.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserUpdateDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete the existing user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete the existing user. Required user's role: Superuser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            }
        },
        "/visits": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the list of visits.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Visits"
                ],
                "summary": "Get a visit list.",
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Visit"
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new visit.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Visits"
                ],
                "summary": "Create a new visit. Required user's role: Admin",
                "parameters": [
                    {
                        "description": "A new visit data for creating.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.VisitDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Visit"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            }
        },
        "/visits/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns one record matched visit's id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Visits"
                ],
                "summary": "Get a visit.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Visit ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Visit"
                        }
                    },
                    "400": {
                        "description": "Failed to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update the existing visit.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Visits"
                ],
                "summary": "Update the existing visit. Required user's role: Admin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Visit ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Visit data for update.",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.VisitDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Visit"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete the existing visit.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Visits"
                ],
                "summary": "Delete the existing visit. Required user's role: Superuser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Visit ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to fetch data.",
                        "schema": {
                            "$ref": "#/definitions/models.Visit"
                        }
                    },
                    "400": {
                        "description": "Failed to the registration.",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to the authentication."
                    },
                    "403": {
                        "description": "Access denied."
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.HealthResult": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "available"
                }
            }
        },
        "dto.ClientDto": {
            "type": "object",
            "properties": {
                "birthDate": {
                    "description": "Date only",
                    "type": "string",
                    "format": "date"
                },
                "email": {
                    "description": "E-mail string.",
                    "type": "string",
                    "example": "mail@mail.com"
                },
                "info": {
                    "description": "Allowed characters: printable ASCII (Russian and English).",
                    "type": "string"
                },
                "name": {
                    "description": "Alphabetic characters only (Russian and English).",
                    "type": "string",
                    "maxLength": 255
                },
                "patronymic": {
                    "description": "Alphabetic characters only (Russian and English).",
                    "type": "string",
                    "maxLength": 255
                },
                "phone": {
                    "description": "E.164 phone number string.",
                    "type": "string",
                    "example": "+79876543210"
                },
                "sex": {
                    "description": "Alphabetic characters only (Russian and English).",
                    "type": "string"
                },
                "surname": {
                    "description": "Alphabetic characters only (Russian and English).",
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "dto.DepartmentDto": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Alphabetic characters only (Russian and English).",
                    "type": "string",
                    "maxLength": 255
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "dto.LeadDto": {
            "type": "object",
            "properties": {
                "comment": {
                    "description": "Allowed characters: printable ASCII (Russian and English).",
                    "type": "string"
                },
                "doctorId": {
                    "type": "integer"
                },
                "email": {
                    "description": "E-mail string.",
                    "type": "string",
                    "example": "mail@mail.com"
                },
                "name": {
                    "description": "Alphabetic characters only (Russian and English).",
                    "type": "string",
                    "maxLength": 255
                },
                "phone": {
                    "description": "E.164 phone number string.",
                    "type": "string",
                    "example": "+79876543210"
                },
                "status": {
                    "description": "Allowed characters: printable ASCII (Russian and English).",
                    "type": "string"
                },
                "type": {
                    "description": "Allowed characters: printable ASCII (Russian and English).",
                    "type": "string"
                }
            }
        },
        "dto.LoginDto": {
            "type": "object",
            "required": [
                "login",
                "password"
            ],
            "properties": {
                "login": {
                    "description": "Login using username, e-mail, or phone.",
                    "type": "string",
                    "example": "Login"
                },
                "password": {
                    "description": "Password must contain at least one uppercase letter, one lowercase letter, one digit, and one special symbol.\nIt can consist of printable ASCII characters.",
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 8,
                    "example": "8p6R*R{3"
                }
            }
        },
        "dto.PetDto": {
            "type": "object",
            "properties": {
                "breed": {
                    "description": "Allowed characters: printable ASCII (Russian and English).",
                    "type": "string"
                },
                "clientId": {
                    "type": "integer"
                },
                "colour": {
                    "description": "Allowed characters: printable ASCII (Russian and English).",
                    "type": "string"
                },
                "name": {
                    "description": "Alphabetic characters only (Russian and English).",
                    "type": "string",
                    "maxLength": 255
                },
                "sex": {
                    "description": "Alphabetic characters only (Russian and English).",
                    "type": "string"
                },
                "type": {
                    "description": "Allowed characters: printable ASCII (Russian and English).",
                    "type": "string"
                }
            }
        },
        "dto.RoleDto": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Alphabetic characters only (Russian and English).",
                    "type": "string"
                }
            }
        },
        "dto.ServiceDto": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "categoryId": {
                    "type": "integer"
                },
                "name": {
                    "description": "Allowed characters: printable ASCII (Russian and English).",
                    "type": "string",
                    "maxLength": 255
                },
                "price": {
                    "type": "number",
                    "format": "float64"
                }
            }
        },
        "dto.UpdatePasswordDto": {
            "description": "The 'NewPassword' and 'OldPassword' should not match, while the 'ConfirmPassword' is required for verification but must match the new password.",
            "type": "object",
            "required": [
                "confirmPassword",
                "newPassword",
                "oldPassword"
            ],
            "properties": {
                "confirmPassword": {
                    "description": "Password must contain at least one uppercase letter, one lowercase letter, one digit, and one special symbol.\nIt can consist of printable ASCII characters.",
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 8,
                    "example": "6@5JG5hG"
                },
                "newPassword": {
                    "description": "Password must contain at least one uppercase letter, one lowercase letter, one digit, and one special symbol.\nIt can consist of printable ASCII characters.",
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 8,
                    "example": "6@5JG5hG"
                },
                "oldPassword": {
                    "description": "Password must contain at least one uppercase letter, one lowercase letter, one digit, and one special symbol.\nIt can consist of printable ASCII characters.",
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 8,
                    "example": "8p6R*R{3"
                }
            }
        },
        "dto.UserCreateDto": {
            "type": "object",
            "required": [
                "password",
                "roleId",
                "username"
            ],
            "properties": {
                "password": {
                    "description": "Password must contain at least one uppercase letter, one lowercase letter, one digit, and one special symbol.\nIt can consist of printable ASCII characters.",
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 8,
                    "example": "8p6R*R{3"
                },
                "roleId": {
                    "type": "integer"
                },
                "username": {
                    "description": "Username must start with an alphabetical character.\nIt can consist of ASCII alphanumeric characters and the following symbols: _.-",
                    "type": "string",
                    "example": "Username"
                }
            }
        },
        "dto.UserUpdateDto": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "birthDate": {
                    "description": "Date only",
                    "type": "string",
                    "format": "date"
                },
                "departments": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "email": {
                    "description": "E-mail string.",
                    "type": "string",
                    "example": "mail@mail.com"
                },
                "info": {
                    "description": "Allowed characters: printable ASCII (Russian and English).",
                    "type": "string"
                },
                "name": {
                    "description": "Alphabetic characters only (Russian and English).",
                    "type": "string",
                    "maxLength": 255
                },
                "patronymic": {
                    "description": "Alphabetic characters only (Russian and English).",
                    "type": "string",
                    "maxLength": 255
                },
                "phone": {
                    "description": "E.164 phone number string.",
                    "type": "string",
                    "example": "+79876543210"
                },
                "profession": {
                    "description": "Allowed characters: printable ASCII (Russian and English).",
                    "type": "string"
                },
                "roleId": {
                    "type": "integer"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "sex": {
                    "description": "Alphabetic characters only (Russian and English).",
                    "type": "string"
                },
                "surname": {
                    "description": "Alphabetic characters only (Russian and English).",
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "dto.VisitDto": {
            "type": "object",
            "properties": {
                "clientId": {
                    "type": "integer"
                },
                "dateTime": {
                    "description": "Date and time.",
                    "type": "string",
                    "format": "date-time"
                },
                "doctorId": {
                    "type": "integer"
                },
                "info": {
                    "description": "Allowed characters: printable ASCII (Russian and English).",
                    "type": "string"
                },
                "petId": {
                    "type": "integer"
                },
                "serviceId": {
                    "type": "integer"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "models.Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Client": {
            "type": "object",
            "properties": {
                "birthDate": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "info": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "sex": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Department": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Service"
                    }
                },
                "slug": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "models.Lead": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "doctor": {
                    "$ref": "#/definitions/models.User"
                },
                "doctorId": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastUpdatedBy": {
                    "$ref": "#/definitions/models.User"
                },
                "lastUpdatedById": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "status": {
                    "description": "open, in_progress, closed, rejected",
                    "type": "string"
                },
                "type": {
                    "description": "in clinic, online, callback",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Pet": {
            "type": "object",
            "properties": {
                "breed": {
                    "type": "string"
                },
                "client": {
                    "$ref": "#/definitions/models.Client"
                },
                "clientId": {
                    "type": "integer"
                },
                "colour": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "sex": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Role": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Service": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/models.Category"
                },
                "categoryId": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "departments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Department"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "birthDate": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "departments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Department"
                    }
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "info": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "profession": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/models.Role"
                },
                "roleId": {
                    "type": "integer"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Service"
                    }
                },
                "sex": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.Visit": {
            "type": "object",
            "properties": {
                "client": {
                    "$ref": "#/definitions/models.Client"
                },
                "clientId": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "dateTime": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "info": {
                    "type": "string"
                },
                "lastUpdatedBy": {
                    "$ref": "#/definitions/models.User"
                },
                "lastUpdatedById": {
                    "type": "integer"
                },
                "pet": {
                    "$ref": "#/definitions/models.Pet"
                },
                "petId": {
                    "type": "integer"
                },
                "serviceId": {
                    "type": "integer"
                },
                "services": {
                    "$ref": "#/definitions/models.Service"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userId": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "v0.1.0",
	Host:             "localhost:8080",
	BasePath:         "/v1",
	Schemes:          []string{"http"},
	Title:            "Vet clinic API",
	Description:      "This is API specification for vet-clinic API server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
